import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from config import BOT_TOKEN
from celery import Celery

backend_celery = Celery(
    "bot-client",
    broker="redis://localhost:6379/0",
    backend="redis://localhost:6379/1"
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def start_command(message: types.Message):
    if not message.from_user:
        return
        
    try:
        result = backend_celery.send_task(
            "authenticate_telegram_user",
            args=[
                message.from_user.id,
                message.from_user.username or "",
                "",
                message.from_user.first_name or "",
                "",
                "",
                "",
                ""
            ]
        )
        
        user_data = result.get(timeout=10)
        
        if user_data:
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /help")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer("""
    /start - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /help - –ø–æ–º–æ—â—å
    """)

@dp.message(Command("status"))
async def status_command(message: types.Message):
    try:
        inspect = backend_celery.control.inspect()
        stats = inspect.stats()
        
        if stats:
            await message.answer("‚úÖ Backend workers –∞–∫—Ç–∏–≤–Ω—ã!")
            for worker, info in stats.items():
                await message.answer(f"üë∑ Worker: {worker}")
        else:
            await message.answer("‚ùå Backend workers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        
@dp.message(Command("view_tasks"))
async def view_tasks_command(message: types.Message):
    if not message.from_user:
        return
        
    try:
        result = backend_celery.send_task(
            "get_user_tasks",
            args=[message.from_user.id]
        )

        tasks = result.get(timeout=10)
        
        if not tasks:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
            return
        
        tasks_list = "\n".join([f"{task['id']}. {task['title']}" for task in tasks])
        await message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks_list}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())